import psycopg2
import psycopg2.extras
from app.config import my_config


class AIMemory:
    """
    A class to manage AI memory in a PostgreSQL database.
    """

    def __init__(self, db_params ):
        """
        Initializes the AIMemory class and connects to the PostgreSQL database.

        Args:
            db_params (dict): A dictionary containing the database connection
                              parameters (dbname, user, password, host, port).
        """
        self.conn = None
        try:
            self.conn = psycopg2.connect(**db_params)
            self._create_table()
        except psycopg2.OperationalError as e:
            print(f"Error connecting to the database: {e}")
            raise

    def _create_table(self):
        """
        Creates the 'conversations' table if it does not already exist.

        The table stores the session ID, user input, LLM response, and a timestamp.
        """
        with self.conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    session_id VARCHAR(255) NOT NULL,
                    user_input TEXT,
                    llm_response TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """)
            self.conn.commit()

    def save_user_input(self, session_id, user_input):
        """
        Saves the user's input to the database for a given session.

        Args:
            session_id (str): The unique identifier for the current session.
            user_input (str): The input provided by the user.
        """
        with self.conn.cursor() as cur:
            cur.execute(
                "INSERT INTO conversations (session_id, user_input) VALUES (%s, %s)",
                (session_id, user_input)
            )
            self.conn.commit()

    def save_llm_response(self, session_id, llm_response):
        """
        Saves the LLM's response to the database for a given session.

        This method updates the last entry for the session with the LLM's response.

        Args:
            session_id (str): The unique identifier for the current session.
            llm_response (str): The response generated by the LLM.
        """
        with self.conn.cursor() as cur:
            cur.execute(
                """
                UPDATE conversations
                SET llm_response = %s
                WHERE id = (
                    SELECT id FROM conversations
                    WHERE session_id = %s
                    ORDER BY created_at DESC
                    LIMIT 1
                )
                """,
                (llm_response, session_id)
            )
            self.conn.commit()

    def get_last_n_conversations(self, session_id, n=5):
        """
        Retrieves the last n conversational turns for a given session.

        Args:
            session_id (str): The unique identifier for the current session.
            n (int): The number of recent conversations to retrieve.

        Returns:
            list: A list of tuples, where each tuple represents a
                  conversational turn (user_input, llm_response).
        """
        with self.conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
            cur.execute(
                """
                SELECT user_input, llm_response
                FROM conversations
                WHERE session_id = %s
                ORDER BY created_at DESC
                LIMIT %s
                """,
                (session_id, n)
            )
            # Fetching and reversing to maintain chronological order
            conversations = cur.fetchall()
            return list(reversed(conversations))

    def close_connection(self):
        """Closes the database connection."""
        if self.conn:
            self.conn.close()


db_connection_params = {
    "dbname": my_config.POSTGRES_DB,
    "user": my_config.POSTGRES_USER_NAME,
    "password": my_config.POSTGRES_PASSWORD,
    "host": my_config.POSTGRES_HOST,
    "port": my_config.POSTGRES_PORT
}

ai_memory = AIMemory(db_connection_params)


